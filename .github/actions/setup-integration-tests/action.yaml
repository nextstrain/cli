name: Setup integration tests
description: >-
  Sets up prerequisites for run-integration-tests, namely installing software
  needed by the "ambient" runner and cloning zika-tutorial for use as an test
  build.

  Jobs which use this action must also set

    defaults:
      run:
        shell: bash -l -eo pipefail {0}

  at the job level (or the equivalent "shell:" key at the step level) to
  activate the integration Conda environment by default.

inputs:
  python-version:
    description: Version of Python to use for conda-incubator/setup-miniconda.
    type: string
    required: true

runs:
  using: composite
  steps:
    - uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ inputs.python-version }}
        miniforge-version: latest
        channels: conda-forge,bioconda

    - run: cat ~/.profile || true
      shell: bash -l -eo pipefail {0}

    - run: cat ~/.bash_profile || true
      shell: bash -l -eo pipefail {0}

    - run: cat ~/.bashrc || true
      shell: bash -l -eo pipefail {0}

    # Install software for the "ambient" runner; not supported on Windows.
    - if: runner.os != 'Windows'
      run: mamba install augur auspice 'snakemake !=7.30.2'
      shell: bash -l -eo pipefail {0}

    - run: conda info
      shell: bash -l -eo pipefail {0}

    - run: conda list
      shell: bash -l -eo pipefail {0}

    - if: runner.os == 'Windows'
      name: Fix python vs. python3 mismatch on Windows
      shell: bash -l -eo pipefail {0}
      run: |
        python="$(type -p python)"
        cp -v "$python" "$(dirname "$python")"/python3

    - name: Check python version
      shell: bash -l -eo pipefail {0}
      run: |
        # Assert that we're on the expected Python version, in case the GH
        # Actions environment is messed up.
        type python
        python --version
        type python3
        python3 --version
        python --version | grep -F 'Python ${{ inputs.python-version }}.'
        python3 --version | grep -F 'Python ${{ inputs.python-version }}.'
        [[ "$(python --version)" == "$(python3 --version)" ]]

    # Install Singularity on Linux.
    #
    # We don't install it with Conda because Conda Forge provides a non-suid
    # build of Singularity.  We're compatible with Singularity's non-suid mode,
    # but production usages of Singularity are likely to use its suid mode, so
    # I'd rather test against that.
    #   -trs, 6 Jan 2023
    - if: runner.os == 'Linux'
      shell: bash -l -eo pipefail {0}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        # Work in a temp dir to avoid cluttering the caller's working dir
        pushd "$(mktemp -d)"
        export "$(grep UBUNTU_CODENAME /etc/os-release)"

        # Download latest SingularityCE 3.x series .deb for this version of Ubuntu
        #
        # XXX TODO: Start testing the SingularityCE 4.x series.
        #   -trs, 19 Sept 2023
        url="$(
          curl -fsSL --proto '=https' -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/sylabs/singularity/releases?per_page=100" \
              | jq -r 'map(select(.tag_name | startswith("v3."))) | .[0].assets | map(select(.name | endswith("\(env.UBUNTU_CODENAME)_amd64.deb"))) | .[0].browser_download_url')"

        curl -fsSL --proto '=https' "$url" > singularity.deb

        # Install and check that it runs
        sudo dpkg -i singularity.deb
        singularity --version

    # Clone the small build we'll use as an integration test case.
    - run: git clone https://github.com/nextstrain/zika-tutorial
      shell: bash -l -eo pipefail {0}
