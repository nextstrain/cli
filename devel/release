#!/bin/bash
set -euo pipefail

devel="$(dirname "$0")"
repo="$devel/.."
version_file="$repo/nextstrain/cli/__version__.py"
changes_file="$repo/CHANGES.md"

main() {
    local version

    assert-clean-working-dir
    assert-changelog-has-additions
    assert-changelog-has-changes-for-next

    version="${1:-$(next-version)}"
    echo "New version will be $version."

    update-version "$version"
    update-changelog "$version"
    commit-and-tag "$version"
    unreleased-version "$version+git"
    remind-to-push "$version"
}

assert-clean-working-dir() {
    local status

    status="$(git status --porcelain --untracked-files=no | grep -vwF "$(basename "$changes_file")" || true)"

    if [[ -n $status ]]; then
        echo "Please commit all changes before releasing:" >&2
        echo >&2
        echo "$status" >&2
        echo >&2
        echo "Only $(basename "$changes_file") is allowed to have uncommitted changes." >&2
        exit 1
    fi
}

assert-changelog-has-additions() {
    local current_version numstat

    current_version="$("$devel"/read-version)"
    numstat="$(git diff --numstat "${current_version%%+*}" -- "$changes_file")"

    local insertions deletions rest

    if [[ -z $numstat ]]; then
        insertions=0
        deletions=0
    else
        read -r insertions deletions rest <<<"$numstat"
    fi

    local net_changed=$((insertions - deletions))

    if [[ $net_changed -lt 1 ]]; then
        echo "It doesn't look like $(basename "$changes_file") was updated; only $insertions - $deletions = $net_changed line(s) were changed." >&2
        exit 1
    fi
}

assert-changelog-has-changes-for-next() {
    if [[ -z "$("$devel"/changes __NEXT__)" ]]; then
        echo "It doesn't look like $(basename "$changes_file") has entries for __NEXT__." >&2
        exit 1
    fi
}

next-version() {
    local current_version
    current_version="$("$devel"/read-version)"
    current_version="${current_version%%+*}"

    read -r -e -p "Current version is $current_version."$'\n'"New version? " -i "$current_version" new_version

    if [[ -z $new_version || $new_version == "$current_version" ]]; then
        echo "You must provide a new version!" >&2
        exit 1
    fi

    echo "$new_version"
}

update-version() {
    local version="$1"

    "$devel"/update-version "$version"
    git add "$version_file"
}

update-changelog() {
    local new_version="$1"
    local today
    today="$(date +"%d %B %Y")"

    # Remove leading zero from day if present
    today="${today#0}"

    # Add the new version heading immediately after the __NEXT__ heading,
    # preserving the __NEXT__ heading itself.
    perl -pi -e "s/(?<=^# __NEXT__$)/\n\n\n# $new_version ($today)/" "$changes_file"

    # Replace any occurrences of __NEXT__ under the new version heading, e.g.
    # for use in doc URLs that should point to the released version.
    perl -pi -e "s/__NEXT__/$new_version/g if /^# \\Q$new_version/ ... /^# /" "$changes_file"

    # Remove the __NEXT__ heading and the sentence «The "__NEXT__" heading
    # below…» for the next commit, but leave the working tree untouched.
    perl -0p -e '
        s/^# __NEXT__\n\n\n//m;
        s/\s*The "__NEXT__" heading below .+?\.//s;
    ' "$changes_file" | git-add-stdin-as "$changes_file"

    # Generate and stage the MyST-formatted changelog for commit
    "$devel"/generate-changes-doc
    git add "$repo/doc/changes.md"
}

git-add-stdin-as() {
    local path="$1"
    local repo_path mode object

    # Convert filesystem $path to a canonicalized path from the root of the
    # repo.  This is required for the commands below.
    repo_path="$(git ls-files --full-name --error-unmatch "$path")"

    # Use existing mode (e.g. 100644)
    mode="$(git ls-tree --format "%(objectmode)" HEAD :/"$repo_path")"

    # Create new object in git's object database from the contents on stdin.
    # Using --path ensures that any filters (e.g. eol textconv or otherwise)
    # that would apply to $path are applied to the contents on stdin too.
    object="$(git hash-object -w --stdin --path "$repo_path")"

    # Stage the new object as an update to $path (as if with `git add` after
    # actually modifying $path).
    git update-index --cacheinfo "$mode,$object,$repo_path"
}

commit-and-tag() {
    local version="$1"

    # Staged changes to commit are added to the index by update-version and
    # update-changelog above.
    git commit -m "version $version"
    git tag -sm "version $version" "$version"
}

unreleased-version() {
    local unreleased_version="$1"

    # Add +git local part to mark any further development
    "$devel"/update-version "$unreleased_version"

    git add "$version_file" "$changes_file"
    git commit -m "dev: Bump version to $unreleased_version"
}

remind-to-push() {
    local version="$1"

    echo
    echo
    echo "Version updated, committed, and tagged!"
    echo
    echo "Please remember to push, including tags:"
    echo
    echo "   git push origin master tag $version"
    echo
    echo "CI will build dists for the release tag and publish them after tests pass."
    echo
}

main "$@"
